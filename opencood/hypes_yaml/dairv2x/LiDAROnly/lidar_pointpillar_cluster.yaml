name: PointPillarCluster_DAIR
# PointPillar with Cluster Fusion - Pure PyTorch implementation
# No mmdet3d dependencies - works with CUDA 11.6 on L40S

dair_data_dir: "/home/jiajin/my_dair_v2x/cooperative-vehicle-infrastructure/"
root_dir: '/home/jiajin/my_dair_v2x/cooperative-vehicle-infrastructure/train.json'
test_dir: '/home/jiajin/my_dair_v2x/cooperative-vehicle-infrastructure/val.json'
validate_dir: '/home/jiajin/my_dair_v2x/cooperative-vehicle-infrastructure/val.json'

wild_setting:
  async: false
  async_mode: 'sim'
  async_overhead: 100
  seed: 25
  loc_err: false
  xyz_std: 0.2
  ryp_std: 0.2
  data_size: 1.06
  transmission_speed: 27
  backbone_delay: 10

yaml_parser: "load_point_pillar_params"
train_params:
  batch_size: &batch_size 2  # Reduced from 4 to 2 due to 11× larger grid size (2048×768 vs 704×200)
  epoches: 35
  eval_freq: 1
  save_freq: 1
  max_cav: &max_cav 2

dair_params:
  car_only: false
  copy_v_to_x: true

fusion:
  core_method: 'intermediate'
  dataset: 'dairv2x'
  args:
    cur_ego_pose_flag: False
    proj_first: &proj_first False
    use_single_label: &use_single_label False

# preprocess-related
preprocess:
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size [0.2, 0.2, 5]  # Compromise: 2x better XY resolution than original, 2.8x grid increase
    max_points_per_voxel: 5
    max_voxel_train: 36000
    max_voxel_test: 70000
  cav_lidar_range: &cav_lidar [-102.4, -38.4, -3.5, 102.4, 38.4, 1.5]  # Paper's range

data_augment:
  - NAME: random_world_flip
    ALONG_AXIS_LIST: ['x']

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [-0.78539816, 0.78539816]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [0.95, 1.05]

# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor'
  gt_range: *cav_lidar
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 3.9
    w: 1.6
    h: 1.56
    r: [0, 90]
    feature_stride: 2  # Keep at 2 for compatibility with PointPillar architecture
    num: &anchor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.27
  order: 'hwl'
  max_num: 100
  nms_thresh: 0.15
  dir_args: &dir_args_post
    dir_offset: 0.7853
    num_bins: 2
    anchor_yaw: [0, 90]

# model related
model:
  core_method: point_pillar_cluster
  args:
    voxel_size: *voxel_size
    lidar_range: *cav_lidar
    anchor_number: *anchor_num
    max_cav: *max_cav
    compression: 0
    backbone_fix: false
    use_single_label: *use_single_label
    proj_first: *proj_first

    pillar_vfe:
      use_norm: true
      with_distance: false
      use_absolute_xyz: true
      num_filters: [64]

    point_pillar_scatter:
      num_features: 64
      grid_size: [1024, 384, 1]  # Compromise: X=1024, Y=384, Z=1 (2.8x increase from original)

    base_bev_backbone:
      layer_nums: [3, 5, 5]
      layer_strides: [2, 2, 2]
      num_filters: [64, 128, 256]
      upsample_strides: [1, 2, 4]
      num_upsample_filter: [128, 128, 128]

    shrink_header:
      kernal_size: [3]
      stride: [1]
      padding: [1]
      dim: [384]
      input_dim: 384

    # Cluster fusion configuration
    fusion_cfg:
      seg_score_th: 0.5
      cluster_topk: 50
      connect_center_dist: 0.6  # Paper setting: changed from 1.0 to 0.6
      two_stage_xyz: cluster_pts
      two_stage_feat_mode: cluster_pts_mean
      use_merge: true

    dir_args: &dir_args
      dir_offset: 0.7853
      num_bins: 2
      anchor_yaw: [0, 90]

loss:
  core_method: point_pillar_loss
  args:
    pos_cls_weight: 1.0
    cls:
      type: 'SigmoidFocalLoss'
      alpha: 0.25
      gamma: 2.0
      weight: 1.0
    reg:
      type: 'WeightedSmoothL1Loss'
      sigma: 3.0
      codewise: true
      weight: 2.0
    dir:
      type: 'WeightedSoftmaxClassificationLoss'
      weight: 0.2
      args: *dir_args

optimizer:
  core_method: Adam
  lr: 0.0005  # Halved from 0.001 due to batch_size reduction from 4→2
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep
  gamma: 0.1
  step_size: [20, 30]
